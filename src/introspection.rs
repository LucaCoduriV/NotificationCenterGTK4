// This code was autogenerated with `dbus-codegen-rust `, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopNotifications {
    fn get_server_information(&self) -> Result<(String, String, String, String), dbus::Error>;
    fn get_capabilities(&self) -> Result<Vec<String>, dbus::Error>;
    fn close_notification(&self, id: u32) -> Result<(), dbus::Error>;
    fn notify(&self, app_name: &str, id: u32, icon: &str, summary: &str, body: &str, actions: Vec<&str>, hints: arg::PropMap, timeout: i32) -> Result<u32, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopNotifications for blocking::Proxy<'a, C> {

    fn get_server_information(&self) -> Result<(String, String, String, String), dbus::Error> {
        self.method_call("org.freedesktop.Notifications", "GetServerInformation", ())
    }

    fn get_capabilities(&self) -> Result<Vec<String>, dbus::Error> {
        self.method_call("org.freedesktop.Notifications", "GetCapabilities", ())
            .and_then(|r: (Vec<String>, )| Ok(r.0, ))
    }

    fn close_notification(&self, id: u32) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.Notifications", "CloseNotification", (id, ))
    }

    fn notify(&self, app_name: &str, id: u32, icon: &str, summary: &str, body: &str, actions: Vec<&str>, hints: arg::PropMap, timeout: i32) -> Result<u32, dbus::Error> {
        self.method_call("org.freedesktop.Notifications", "Notify", (app_name, id, icon, summary, body, actions, hints, timeout, ))
            .and_then(|r: (u32, )| Ok(r.0, ))
    }
}
